<!DOCTYPE html>

<html>

<head>

	<title>Chat</title>

	<link type="text/css" rel="stylesheet" href="/assets/css/stylesheet.css" />
	<%- include('../includes/head'); %>


</head>

<body>
<%- include('../includes/header'); %>

<div id="chat">
	<section class="section">

		<!-- These elements are displayed as white info cards in the middle of the screen -->

		<!-- <div class="connected">

			<div class="infoConnected">
				<h2><span class="nickname-left"></span></h2>
				<br/>

				<form class="loginForm">
					<input type="text" id="yourName" placeholder="Your nick name" /><br/>
					<input type="text" id="yourEmail" placeholder="Your email address" /><br/>
					<input type="submit" id="yourEnter" value="ENTER" />
				</form>

			</div>

		</div> -->

		<!-- <div class="personinside">

			<img src="../img/unnamed.jpg" id="ownerImage" />

			<div class="infoInside">
				<h2>Chat with <span class="nickname-chat"></span></h2>
				<br/>

				<form class="loginForm">
					<input type="text" id="hisName" placeholder="Your nick name" /><br/>
					<input type="text" id="hisEmail" placeholder="Your email address" /><br/>
					<input type="submit" id="hisEnter" value="CHAT" />
				</form>

			</div>

		</div> -->

		<div class="invite-textfield">

			<h2 class="text-danger"><%= other_user.local.name %> is not online!</h2>

		</div>

		<div class="left">

			<img src="../img/unnamed.jpg" id="leftImage" />

			<div class="info">
				<h2><span class="nickname-left"></span> has left this chat.</h2>
			</div>

		</div>

		<div class="toomanypeople">

			<h2>Oops, you can not join this chat!</h2>

		</div>

		<div class="nomessages">

			<img src="<%= other_user.getAvatarUrl() %>" id="noMessagesImage" />

			<div class="info">
				<h2><span><%= other_user.local.name %></span></h2>
				<h5 class="online" style="display: none">Online</h5>
				<h5 class="offline" style="display: none">Offline</h5>
			</div>

		</div>

		<div class="chatscreen">

			<ul class="chats">
				<% chats.forEach(function(chat) { %>
				
					<% if(chat.sender.id == user.id) { %>
					<li class="me">
						<div class="image">
							<img src=<%= chat.sender.getAvatarUrl() %> />
							<b><%= chat.sender.local.name %></b>
							<i class="timesent" data-time="<%= chat.createdAt.toISOString() %>"><%= chat.createdAt.toISOString() %></i>
						</div>
						<p><%= chat.message %></p>
					</li>
					<% }else{ %>
					<li class="you">
						<div class="image">
							<img src=<%= chat.sender.getAvatarUrl() %> />
							<b><%= chat.sender.local.name %></b>
							<i class="timesent" data-time="<%= chat.createdAt.toISOString() %>"><%= chat.createdAt.toISOString() %></i>
						</div>
						<p><%= chat.message %></p>
					</li>
					<% } %>

				<% }); %>
			</ul>

		</div>

	</section>

	<footer>

		<form id="chatform">

			<textarea id="message" placeholder="Write something.."></textarea>
			<input type="submit" id="submit" value="SEND"/>

		</form>

	</footer>
</div>
	<script src="http://cdnjs.cloudflare.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>
	<script src="/assets/js/moment.min.js"></script>
	<script src="/socket.io/socket.io.js"></script>
	<!-- <script src="/assets/js/chat.js"></script> -->

	<script type="text/javascript">
		// This file is executed in the browser, when people visit /chat/<random id>

$(function(){
	scrollToBottom();
	// getting the id of the room from the url
		var id = "<%= id %>";

	// connect to the socket
	var socket = io();
	
	// variables which hold the data for each person
	var name = "",
		email = "",
		img = "",
		friend = "";

	// cache some jQuery objects
	var section = $(".section"),
		footer = $("footer"),
		onConnect = $(".connected"),
		offline = $(".offline"),
		online = $(".online"),
		inviteSomebody = $(".invite-textfield"),
		personInside = $(".personinside"),
		chatScreen = $(".chatscreen"),
		left = $(".left"),
		noMessages = $(".nomessages"),
		tooManyPeople = $(".toomanypeople");

	// some more jquery objects
	var chatNickname = $(".nickname-chat"),
		leftNickname = $(".nickname-left"),
		loginForm = $(".loginForm"),
		yourName = $("#yourName"),
		yourEmail = $("#yourEmail"),
		hisName = $("#hisName"),
		hisEmail = $("#hisEmail"),
		chatForm = $("#chatform"),
		textarea = $("#message"),
		messageTimeSent = $(".timesent"),
		chats = $(".chats");

	// these variables hold images
	var ownerImage = $("#ownerImage"),
		leftImage = $("#leftImage"),
		noMessagesImage = $("#noMessagesImage");


	// on connection to server get the id of person's room
	socket.on('connect', function(){
		socket.emit('load', id);
	});

	// save the gravatar url
	socket.on('img', function(data){
		img = '<%= user.getAvatarUrl() %>';
	});

	// receive the names and avatars of all people in the chat room
	socket.on('peopleinchat', function(data){

		if(data.number === 0){

			showMessage("connected");

			name = '<%= user.local.name %>';
			socket.emit('login', {user: name, avatar: '<%= user.getAvatarUrl() %>', id: id});
		}

		else if(data.number === 1) {

			showMessage("personinchat",data);
			name = '<%= user.local.name %>';
			socket.emit('login', {user: name, avatar: '<%= user.getAvatarUrl() %>', id: id});
		}

		else {
			showMessage("tooManyPeople");
		}

	});

	// Other useful 

	socket.on('startChat', function(data){
		if(data.boolean && data.id == id) {
			offline.fadeOut(1200, function(){
				online.fadeIn(1200);
			});
			// chats.empty();

			if(name === data.users[0]) {

				showMessage("youStartedChatWithNoMessages",data);
			}
			else {

				showMessage("heStartedChatWithNoMessages",data);
			}

			chatNickname.text(friend);
		}
	});

	socket.on('leave',function(data){

		if(data.boolean && id==data.room){

			showMessage("somebodyLeft", data);
		}

	});

	socket.on('tooMany', function(data){

		if(data.boolean && name.length === 0) {

			showMessage('tooManyPeople');
		}
	});

	socket.on('receive', function(data){

		showMessage('chatStarted');

		if(data.msg.trim().length) {
			createChatMessage(data.msg, data.user, data.img, moment());
			scrollToBottom();
		}
	});

	textarea.keypress(function(e){

		// Submit the form on enter

		if(e.which == 13) {
			e.preventDefault();
			chatForm.trigger('submit');
		}

	});

	chatForm.on('submit', function(e){

		e.preventDefault();

		// Create a new chat message and display it directly

		showMessage("chatStarted");

		if(textarea.val().trim().length) {
			createChatMessage(textarea.val(), name, img, moment());
			scrollToBottom();
			// Send the message to the other person in the chat
			socket.emit('msg', {msg: textarea.val(), reservation_id: "<%= reservation.id %>", sender_id: "<%= user.id %>", sender_name: "<%= user.local.name %>", receiver_id: "<%= other_user.id %>", receiver_name: "<%= other_user.local.name %>", img: img});

		}
		// Empty the textarea
		textarea.val("");
	});

	// Update the relative time stamps on the chat messages every minute
	function updateTimeStamps(){
		messageTimeSent.each(function(){
			var each = moment($(this).data('time'));
			$(this).text(moment($(this).data('time')).format('lll') + ' (' + each.fromNow() + ')');
		});
	}

	updateTimeStamps();
	setInterval(function(){

		updateTimeStamps();

	},60000);

	// Function that creates a new chat message

	function createChatMessage(msg,user,imgg,now){

		var who = '';

		if(user===name) {
			who = 'me';
		}
		else {
			who = 'you';
		}

		var li = $(
			'<li class=' + who + '>'+
				'<div class="image">' +
					'<img src=' + imgg + ' />' +
					'<b></b>' +
					'<i class="timesent" data-time=' + now + '></i> ' +
				'</div>' +
				'<p></p>' +
			'</li>');

		// use the 'text' method to escape malicious user input
		li.find('p').text(msg);
		li.find('b').text(user);

		chats.append(li);

		messageTimeSent = $(".timesent");
		updateTimeStamps();
	}

	function scrollToBottom(){
		$("html, body").animate({ scrollTop: $(document).height()-$(window).height() },1000);
	}

	function isValid(thatemail) {

		var re = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
		return re.test(thatemail);
	}

	function showMessage(status,data){

		if(status === "connected"){

			// section.children().css('display', 'none');
			// onConnect.fadeIn(1200);

			// inviteSomebody.fadeIn(1200);
			online.fadeOut(600, function(){
				offline.fadeIn(600);
			});
		}

		else if(status === "inviteSomebody"){

			// Set the invite link content
			$("#link").text(window.location.href);

			online.fadeOut(600, function(){
				offline.fadeIn(600);
			});
		}

		else if(status === "personinchat"){

			onConnect.css("display", "none");
			personInside.fadeIn(600);

			chatNickname.text(data.user);
			ownerImage.attr("src",data.avatar);

			online.fadeOut(600, function(){
				offline.fadeIn(600);
			});
		}

		// else if(status === "youStartedChatWithNoMessages") {
		// 	left.fadeOut(1200, function() {
		// 		inviteSomebody.fadeOut(1200,function(){
		// 			noMessages.fadeIn(1200);
		// 			footer.fadeIn(1200);
		// 		});
		// 	});

		// 	offline.fadeOut(1200, function(){
		// 		online.fadeIn(1200);
		// 	});

		// 	friend = data.users[1];
		// 	noMessagesImage.attr("src",data.avatars[1]);
		// }

		// else if(status === "heStartedChatWithNoMessages") {

		// 	personInside.fadeOut(1200,function(){
		// 		noMessages.fadeIn(1200);
		// 		footer.fadeIn(1200);
		// 	});

		// 	offline.fadeOut(1200, function(){
		// 		online.fadeIn(1200);
		// 	});

		// 	friend = data.users[0];
		// 	noMessagesImage.attr("src",data.avatars[0]);
		// }

		else if(status === "chatStarted"){

			section.children().css('display','none');
			chatScreen.css('display','block');
		}

		else if(status === "somebodyLeft"){
			online.fadeOut(600, function(){
				offline.fadeIn(600);
			});
			// leftImage.attr("src",data.avatar);
			// leftNickname.text(data.user);

			// section.children().css('display','none');
			// footer.css('display', 'none');
			// left.fadeIn(1200);
		}

		else if(status === "tooManyPeople") {

			section.children().css('display', 'none');
			tooManyPeople.fadeIn(1200);
		}
	}

});

	</script>
<%- include('../includes/foot'); %>

</body>

</html>